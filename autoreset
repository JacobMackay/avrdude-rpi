#!/usr/bin/python

import lgpio
import sys, os, re, time, fcntl
import errno

fd = sys.stdin.fileno()
fl = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

lgpio.exceptions = False
dtr = re.compile('.+TIOCM_DTR.+')
start = time.time()

h = lgpio.gpiochip_open(0)
pin = 17 # GPIO17, pin number 11 on rpi4
lgpio.gpio_claim_output(h, pin)
lgpio.gpio_write(h, pin, 1)

def reset():
  lgpio.gpio_write(h, pin, 0)
  time.sleep(0.01)
  lgpio.gpio_write(h, pin, 1)
  time.sleep(0.01)
  print("Reset done.")

def process():
  while True:
    try:
      duration = time.time() - start
      input = sys.stdin.readline().strip()
      if input is None: # == "":
        input = sys.stdin.readline().strip()
      if dtr.match(input):
        reset()
        return
      elif duration > 5000:
        print("avrdude-gpio-autoreset timed out.")
        return
    except Exception as e:
      if hasattr(e, 'errno'):
       #	if e.errno != 11: # Ignore resource unavailable
       if e.errno != 17: # Ignore resource unavailable
         raise
      else:
        raise

process()
print ("avrdude-original: Using autoreset DTR on GPIO Pin " + str(pin))
lgpio.gpiochip_close(h)
print ("done with autoreset - ignore Broken pipe errors if Done uploading")
exit
